// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: user.proto

/*
Package account_service is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

It is generated from these files:
	user.proto
*/
package account_service

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUsersFindUser = "/account.service.Users/FindUser"
var PathUsersFindUserList = "/account.service.Users/FindUserList"
var PathUsersAddUser = "/account.service.Users/AddUser"
var PathUsersDeleteUser = "/account.service.Users/DeleteUser"
var PathUsersUpdateUser = "/account.service.Users/UpdateUser"
var PathUsersToken = "/account.service.Users/token"

var PathUserDetailCommonUpdateUserCommon = "/account.service.UserDetailCommon/UpdateUserCommon"
var PathUserDetailCommonFindUserCommon = "/account.service.UserDetailCommon/FindUserCommon"

// UsersBMServer is the server API for Users service.
// 用户信息
type UsersBMServer interface {
	// 查询用户
	FindUser(ctx context.Context, req *FindUserReq) (resp *UserReply, err error)

	// 查询多个用户
	FindUserList(ctx context.Context, req *FindUserReq) (resp *UserListReply, err error)

	// 添加用户
	AddUser(ctx context.Context, req *AddUserReq) (resp *UserReply, err error)

	// 删除用户
	DeleteUser(ctx context.Context, req *DeleteUserReq) (resp *UserReply, err error)

	// 修改用户
	UpdateUser(ctx context.Context, req *UpdateUserReq) (resp *UserReply, err error)

	// 用户token较验
	Token(ctx context.Context, req *TokenReq) (resp *UserReply, err error)
}

var UsersSvc UsersBMServer

func usersFindUser(c *bm.Context) {
	p := new(FindUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UsersSvc.FindUser(c, p)
	c.JSON(resp, err)
}

func usersFindUserList(c *bm.Context) {
	p := new(FindUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UsersSvc.FindUserList(c, p)
	c.JSON(resp, err)
}

func usersAddUser(c *bm.Context) {
	p := new(AddUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UsersSvc.AddUser(c, p)
	c.JSON(resp, err)
}

func usersDeleteUser(c *bm.Context) {
	p := new(DeleteUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UsersSvc.DeleteUser(c, p)
	c.JSON(resp, err)
}

func usersUpdateUser(c *bm.Context) {
	p := new(UpdateUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UsersSvc.UpdateUser(c, p)
	c.JSON(resp, err)
}

func usersToken(c *bm.Context) {
	p := new(TokenReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UsersSvc.Token(c, p)
	c.JSON(resp, err)
}

// RegisterUsersBMServer Register the blademaster route
func RegisterUsersBMServer(e *bm.Engine, server UsersBMServer) {
	UsersSvc = server
	e.GET("/account.service.Users/FindUser", usersFindUser)
	e.GET("/account.service.Users/FindUserList", usersFindUserList)
	e.GET("/account.service.Users/AddUser", usersAddUser)
	e.GET("/account.service.Users/DeleteUser", usersDeleteUser)
	e.GET("/account.service.Users/UpdateUser", usersUpdateUser)
	e.GET("/account.service.Users/token", usersToken)
}

// UserDetailCommonBMServer is the server API for UserDetailCommon service.
// 详细信息
type UserDetailCommonBMServer interface {
	UpdateUserCommon(ctx context.Context, req *UserCommon) (resp *UserCommon, err error)

	FindUserCommon(ctx context.Context, req *UserCommonReq) (resp *UserCommon, err error)
}

var UserDetailCommonSvc UserDetailCommonBMServer

func userDetailCommonUpdateUserCommon(c *bm.Context) {
	p := new(UserCommon)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserDetailCommonSvc.UpdateUserCommon(c, p)
	c.JSON(resp, err)
}

func userDetailCommonFindUserCommon(c *bm.Context) {
	p := new(UserCommonReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserDetailCommonSvc.FindUserCommon(c, p)
	c.JSON(resp, err)
}

// RegisterUserDetailCommonBMServer Register the blademaster route
func RegisterUserDetailCommonBMServer(e *bm.Engine, server UserDetailCommonBMServer) {
	UserDetailCommonSvc = server
	e.GET("/account.service.UserDetailCommon/UpdateUserCommon", userDetailCommonUpdateUserCommon)
	e.GET("/account.service.UserDetailCommon/FindUserCommon", userDetailCommonFindUserCommon)
}
