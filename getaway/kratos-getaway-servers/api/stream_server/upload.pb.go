// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: upload.proto

package stream_server_v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NewTokenReq struct {
	// 上传到 BFS 的 bucket
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty" form:"bucket" validate:"required"`
	// 上传到指定的 BFS 目录（可以用来区分业务）
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty" form:"dir"`
	// 操作人（mlive通过dashboard授权获取到的操作人）
	Operator             string   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" form:"operator" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewTokenReq) Reset()         { *m = NewTokenReq{} }
func (m *NewTokenReq) String() string { return proto.CompactTextString(m) }
func (*NewTokenReq) ProtoMessage()    {}
func (*NewTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{0}
}
func (m *NewTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTokenReq.Merge(m, src)
}
func (m *NewTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *NewTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_NewTokenReq proto.InternalMessageInfo

func (m *NewTokenReq) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *NewTokenReq) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *NewTokenReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type NewTokenResp struct {
	// 授予的 token
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewTokenResp) Reset()         { *m = NewTokenResp{} }
func (m *NewTokenResp) String() string { return proto.CompactTextString(m) }
func (*NewTokenResp) ProtoMessage()    {}
func (*NewTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{1}
}
func (m *NewTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTokenResp.Merge(m, src)
}
func (m *NewTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *NewTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_NewTokenResp proto.InternalMessageInfo

func (m *NewTokenResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// The file/data part must use Request.FormFile() to retrieve manually.
type UploadFileReq struct {
	// 上传的用户id
	Idno string `protobuf:"bytes,1,opt,name=idno,proto3" json:"idno,omitempty" form:"id_no" validate:"required"`
	// 上传到指定的 BFS 目录（可以用来区分业务）
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty" form:"dir"`
	// 上传的到bfs的文件名（存储在bfs的文件名，不传bfs会根据文件的sha1值生成并返回）
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty" form:"file_name" validate:"required"`
	// 上传的文件的类型（不指定时会自动检测文件类型）
	ContentType string `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty" form:"content_type" validate:"required"`
	// 图片水印key，添加图片水印需要上传该参数, 新业务需要提前向bfs申请
	WmKey string `protobuf:"bytes,5,opt,name=wmKey,proto3" json:"wmKey,omitempty" form:"wm_key"`
	// 文字水印，限制不超过20个字符
	WmText string `protobuf:"bytes,6,opt,name=wmText,proto3" json:"wmText,omitempty" form:"wm_text"`
	// 水印位置右下角 到原图右下角 水平距离，默认10px
	WmPaddingX uint32 `protobuf:"varint,7,opt,name=wmPaddingX,proto3" json:"wmPaddingX,omitempty" form:"wm_padding_x"`
	// 水印位置右下角 到原图右下角 垂直距离，默认10px
	WmPaddingY uint32 `protobuf:"varint,8,opt,name=wmPaddingY,proto3" json:"wmPaddingY,omitempty" form:"wm_padding_y"`
	// 水印宽度占原图高度的比例(0,1) （只支持按照宽度压缩)，默认值: 0.035
	WmScale float64 `protobuf:"fixed64,9,opt,name=wmScale,proto3" json:"wmScale,omitempty" form:"wm_scale"`
	//视频tag
	Tag                  string   `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty" form:"tag" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileReq) Reset()         { *m = UploadFileReq{} }
func (m *UploadFileReq) String() string { return proto.CompactTextString(m) }
func (*UploadFileReq) ProtoMessage()    {}
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{2}
}
func (m *UploadFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileReq.Merge(m, src)
}
func (m *UploadFileReq) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileReq proto.InternalMessageInfo

func (m *UploadFileReq) GetIdno() string {
	if m != nil {
		return m.Idno
	}
	return ""
}

func (m *UploadFileReq) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *UploadFileReq) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *UploadFileReq) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *UploadFileReq) GetWmKey() string {
	if m != nil {
		return m.WmKey
	}
	return ""
}

func (m *UploadFileReq) GetWmText() string {
	if m != nil {
		return m.WmText
	}
	return ""
}

func (m *UploadFileReq) GetWmPaddingX() uint32 {
	if m != nil {
		return m.WmPaddingX
	}
	return 0
}

func (m *UploadFileReq) GetWmPaddingY() uint32 {
	if m != nil {
		return m.WmPaddingY
	}
	return 0
}

func (m *UploadFileReq) GetWmScale() float64 {
	if m != nil {
		return m.WmScale
	}
	return 0
}

func (m *UploadFileReq) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

//视频信息
type UploadFileResp struct {
	// 上传的用户id
	Idno string `protobuf:"bytes,1,opt,name=idno,proto3" json:"idno,omitempty" form:"id_no"`
	// 上传到指定的 BFS 目录（可以用来区分业务）
	Dir string `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty" form:"dir"`
	// 上传的到bfs的文件名（存储在bfs的文件名，不传bfs会根据文件的sha1值生成并返回）
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty" form:"file_name"`
	// 上传的文件的类型（不指定时会自动检测文件类型）
	ContentType string `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty" form:"content_type"`
	// 图片水印key，添加图片水印需要上传该参数, 新业务需要提前向bfs申请
	WmKey string `protobuf:"bytes,5,opt,name=wmKey,proto3" json:"wmKey,omitempty" form:"wm_key"`
	// 文字水印，限制不超过20个字符
	WmText string `protobuf:"bytes,6,opt,name=wmText,proto3" json:"wmText,omitempty" form:"wm_text"`
	// 水印位置右下角 到原图右下角 水平距离，默认10px
	WmPaddingX uint32 `protobuf:"varint,7,opt,name=wmPaddingX,proto3" json:"wmPaddingX,omitempty" form:"wm_padding_x"`
	// 水印位置右下角 到原图右下角 垂直距离，默认10px
	WmPaddingY uint32 `protobuf:"varint,8,opt,name=wmPaddingY,proto3" json:"wmPaddingY,omitempty" form:"wm_padding_y"`
	// 水印宽度占原图高度的比例(0,1) （只支持按照宽度压缩)，默认值: 0.035
	WmScale float64 `protobuf:"fixed64,9,opt,name=wmScale,proto3" json:"wmScale,omitempty" form:"wm_scale"`
	//视频tag
	Tag string `protobuf:"bytes,10,opt,name=tag,proto3" json:"tag,omitempty" form:"tag"`
	//视频vid
	Vid string `protobuf:"bytes,11,opt,name=vid,proto3" json:"vid,omitempty" form:"vid"`
	//创建时间
	Createat string `protobuf:"bytes,12,opt,name=createat,proto3" json:"createat,omitempty" form:"create_at"`
	//创建ip
	Createip string `protobuf:"bytes,13,opt,name=createip,proto3" json:"createip,omitempty" form:"create_ip"`
	//文件hash
	Hash                 string   `protobuf:"bytes,14,opt,name=hash,proto3" json:"hash,omitempty" form:"hash"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadFileResp) Reset()         { *m = UploadFileResp{} }
func (m *UploadFileResp) String() string { return proto.CompactTextString(m) }
func (*UploadFileResp) ProtoMessage()    {}
func (*UploadFileResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{3}
}
func (m *UploadFileResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadFileResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadFileResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadFileResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResp.Merge(m, src)
}
func (m *UploadFileResp) XXX_Size() int {
	return m.Size()
}
func (m *UploadFileResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResp proto.InternalMessageInfo

func (m *UploadFileResp) GetIdno() string {
	if m != nil {
		return m.Idno
	}
	return ""
}

func (m *UploadFileResp) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *UploadFileResp) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *UploadFileResp) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *UploadFileResp) GetWmKey() string {
	if m != nil {
		return m.WmKey
	}
	return ""
}

func (m *UploadFileResp) GetWmText() string {
	if m != nil {
		return m.WmText
	}
	return ""
}

func (m *UploadFileResp) GetWmPaddingX() uint32 {
	if m != nil {
		return m.WmPaddingX
	}
	return 0
}

func (m *UploadFileResp) GetWmPaddingY() uint32 {
	if m != nil {
		return m.WmPaddingY
	}
	return 0
}

func (m *UploadFileResp) GetWmScale() float64 {
	if m != nil {
		return m.WmScale
	}
	return 0
}

func (m *UploadFileResp) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *UploadFileResp) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *UploadFileResp) GetCreateat() string {
	if m != nil {
		return m.Createat
	}
	return ""
}

func (m *UploadFileResp) GetCreateip() string {
	if m != nil {
		return m.Createip
	}
	return ""
}

func (m *UploadFileResp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

//添加评价视频
type EvaluationVodieReq struct {
	//视频的上传着用户id
	Idno string `protobuf:"bytes,1,opt,name=idno,proto3" json:"idno,omitempty" form:"id_no" validate:"required"`
	//评价人的用户id
	Eidno string `protobuf:"bytes,2,opt,name=eidno,proto3" json:"eidno,omitempty" form:"e_idno" validate:"required"`
	//评价人的姓名
	Ename string `protobuf:"bytes,3,opt,name=ename,proto3" json:"ename,omitempty" form:"e_name" validate:"required"`
	//评价内容
	Econtent string `protobuf:"bytes,4,opt,name=econtent,proto3" json:"econtent,omitempty" form:"e_content" validate:"required"`
	//评价的视频
	Vid string `protobuf:"bytes,5,opt,name=vid,proto3" json:"vid,omitempty" form:"vid" validate:"required"`
	//关联的评价id，neid不存在时，改评价为父评价
	Neid                 string   `protobuf:"bytes,6,opt,name=neid,proto3" json:"neid,omitempty" form:"n_eid" `
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvaluationVodieReq) Reset()         { *m = EvaluationVodieReq{} }
func (m *EvaluationVodieReq) String() string { return proto.CompactTextString(m) }
func (*EvaluationVodieReq) ProtoMessage()    {}
func (*EvaluationVodieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{4}
}
func (m *EvaluationVodieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationVodieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationVodieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationVodieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationVodieReq.Merge(m, src)
}
func (m *EvaluationVodieReq) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationVodieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationVodieReq.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationVodieReq proto.InternalMessageInfo

func (m *EvaluationVodieReq) GetIdno() string {
	if m != nil {
		return m.Idno
	}
	return ""
}

func (m *EvaluationVodieReq) GetEidno() string {
	if m != nil {
		return m.Eidno
	}
	return ""
}

func (m *EvaluationVodieReq) GetEname() string {
	if m != nil {
		return m.Ename
	}
	return ""
}

func (m *EvaluationVodieReq) GetEcontent() string {
	if m != nil {
		return m.Econtent
	}
	return ""
}

func (m *EvaluationVodieReq) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *EvaluationVodieReq) GetNeid() string {
	if m != nil {
		return m.Neid
	}
	return ""
}

//获取指定指定评价视频
type EvaluationGetReq struct {
	//评价的neid，判断是否指向下一个评价，指向就是回复
	Neid string `protobuf:"bytes,1,opt,name=neid,proto3" json:"neid,omitempty" form:"neid" `
	//获取指定视频的评价
	Vid string `protobuf:"bytes,2,opt,name=vid,proto3" json:"vid,omitempty" form:"vid" validate:"required"`
	//评价的的起点
	StartPos int32 `protobuf:"varint,3,opt,name=startPos,proto3" json:"startPos,omitempty" form:"start_pos"`
	//评价的结束位置
	EndPos               int32    `protobuf:"varint,4,opt,name=endPos,proto3" json:"endPos,omitempty" form:"end_pos"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvaluationGetReq) Reset()         { *m = EvaluationGetReq{} }
func (m *EvaluationGetReq) String() string { return proto.CompactTextString(m) }
func (*EvaluationGetReq) ProtoMessage()    {}
func (*EvaluationGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{5}
}
func (m *EvaluationGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationGetReq.Merge(m, src)
}
func (m *EvaluationGetReq) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationGetReq proto.InternalMessageInfo

func (m *EvaluationGetReq) GetNeid() string {
	if m != nil {
		return m.Neid
	}
	return ""
}

func (m *EvaluationGetReq) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *EvaluationGetReq) GetStartPos() int32 {
	if m != nil {
		return m.StartPos
	}
	return 0
}

func (m *EvaluationGetReq) GetEndPos() int32 {
	if m != nil {
		return m.EndPos
	}
	return 0
}

//返回评价视频内容
type EvaluationVodieResp struct {
	//视频的上传着用户id
	Idno string `protobuf:"bytes,1,opt,name=idno,proto3" json:"idno,omitempty" form:"id_no" validate:"required"`
	//评价人的用户id
	Eidno string `protobuf:"bytes,2,opt,name=eidno,proto3" json:"eidno,omitempty" form:"e_idno" validate:"required"`
	//评价人的姓名
	Ename string `protobuf:"bytes,3,opt,name=ename,proto3" json:"ename,omitempty" form:"e_name" validate:"required"`
	//评价内容
	Econtent string `protobuf:"bytes,4,opt,name=econtent,proto3" json:"econtent,omitempty" form:"e_content" validate:"required"`
	//视频唯一id
	Vid string `protobuf:"bytes,5,opt,name=vid,proto3" json:"vid,omitempty" form:"vid" validate:"required"`
	//评价内容id
	Eid string `protobuf:"bytes,6,opt,name=eid,proto3" json:"eid,omitempty" form:"eid" validate:"required"`
	//评价创建时间
	Createat string `protobuf:"bytes,7,opt,name=createat,proto3" json:"createat,omitempty" form:"create_at" validate:"required"`
	//评价创建ip
	Createip string `protobuf:"bytes,8,opt,name=createip,proto3" json:"createip,omitempty" form:"create_ip" validate:"required"`
	//评价的父id
	Neid                 string   `protobuf:"bytes,9,opt,name=neid,proto3" json:"neid,omitempty" form:"n_eid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvaluationVodieResp) Reset()         { *m = EvaluationVodieResp{} }
func (m *EvaluationVodieResp) String() string { return proto.CompactTextString(m) }
func (*EvaluationVodieResp) ProtoMessage()    {}
func (*EvaluationVodieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{6}
}
func (m *EvaluationVodieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationVodieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationVodieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationVodieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationVodieResp.Merge(m, src)
}
func (m *EvaluationVodieResp) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationVodieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationVodieResp.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationVodieResp proto.InternalMessageInfo

func (m *EvaluationVodieResp) GetIdno() string {
	if m != nil {
		return m.Idno
	}
	return ""
}

func (m *EvaluationVodieResp) GetEidno() string {
	if m != nil {
		return m.Eidno
	}
	return ""
}

func (m *EvaluationVodieResp) GetEname() string {
	if m != nil {
		return m.Ename
	}
	return ""
}

func (m *EvaluationVodieResp) GetEcontent() string {
	if m != nil {
		return m.Econtent
	}
	return ""
}

func (m *EvaluationVodieResp) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *EvaluationVodieResp) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func (m *EvaluationVodieResp) GetCreateat() string {
	if m != nil {
		return m.Createat
	}
	return ""
}

func (m *EvaluationVodieResp) GetCreateip() string {
	if m != nil {
		return m.Createip
	}
	return ""
}

func (m *EvaluationVodieResp) GetNeid() string {
	if m != nil {
		return m.Neid
	}
	return ""
}

//视频的评价或者回复列表
type EvaluationListByVodieResp struct {
	//repeated表示可重复 []results
	Results              []*EvaluationVodieResp `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EvaluationListByVodieResp) Reset()         { *m = EvaluationListByVodieResp{} }
func (m *EvaluationListByVodieResp) String() string { return proto.CompactTextString(m) }
func (*EvaluationListByVodieResp) ProtoMessage()    {}
func (*EvaluationListByVodieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{7}
}
func (m *EvaluationListByVodieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluationListByVodieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluationListByVodieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluationListByVodieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluationListByVodieResp.Merge(m, src)
}
func (m *EvaluationListByVodieResp) XXX_Size() int {
	return m.Size()
}
func (m *EvaluationListByVodieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluationListByVodieResp.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluationListByVodieResp proto.InternalMessageInfo

func (m *EvaluationListByVodieResp) GetResults() []*EvaluationVodieResp {
	if m != nil {
		return m.Results
	}
	return nil
}

//获取用户的所有视频列表
type FileListReq struct {
	Idno string `protobuf:"bytes,1,opt,name=idno,proto3" json:"idno,omitempty" form:"id_no" validate:"required"`
	//分页起点
	Startpos int32 `protobuf:"varint,2,opt,name=startpos,proto3" json:"startpos,omitempty" form:"start_pos"`
	//分页结束位置
	Endpos               int32    `protobuf:"varint,3,opt,name=endpos,proto3" json:"endpos,omitempty" form:"end_pos"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileListReq) Reset()         { *m = FileListReq{} }
func (m *FileListReq) String() string { return proto.CompactTextString(m) }
func (*FileListReq) ProtoMessage()    {}
func (*FileListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{8}
}
func (m *FileListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileListReq.Merge(m, src)
}
func (m *FileListReq) XXX_Size() int {
	return m.Size()
}
func (m *FileListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FileListReq.DiscardUnknown(m)
}

var xxx_messageInfo_FileListReq proto.InternalMessageInfo

func (m *FileListReq) GetIdno() string {
	if m != nil {
		return m.Idno
	}
	return ""
}

func (m *FileListReq) GetStartpos() int32 {
	if m != nil {
		return m.Startpos
	}
	return 0
}

func (m *FileListReq) GetEndpos() int32 {
	if m != nil {
		return m.Endpos
	}
	return 0
}

//返回用户的所有视频列表
type FileListResp struct {
	//repeated表示可重复 []results
	Results              []*UploadFileResp `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FileListResp) Reset()         { *m = FileListResp{} }
func (m *FileListResp) String() string { return proto.CompactTextString(m) }
func (*FileListResp) ProtoMessage()    {}
func (*FileListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b94b655bd2a7e5, []int{9}
}
func (m *FileListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileListResp.Merge(m, src)
}
func (m *FileListResp) XXX_Size() int {
	return m.Size()
}
func (m *FileListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FileListResp.DiscardUnknown(m)
}

var xxx_messageInfo_FileListResp proto.InternalMessageInfo

func (m *FileListResp) GetResults() []*UploadFileResp {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*NewTokenReq)(nil), "stream.server.v1.NewTokenReq")
	proto.RegisterType((*NewTokenResp)(nil), "stream.server.v1.NewTokenResp")
	proto.RegisterType((*UploadFileReq)(nil), "stream.server.v1.UploadFileReq")
	proto.RegisterType((*UploadFileResp)(nil), "stream.server.v1.UploadFileResp")
	proto.RegisterType((*EvaluationVodieReq)(nil), "stream.server.v1.EvaluationVodieReq")
	proto.RegisterType((*EvaluationGetReq)(nil), "stream.server.v1.EvaluationGetReq")
	proto.RegisterType((*EvaluationVodieResp)(nil), "stream.server.v1.EvaluationVodieResp")
	proto.RegisterType((*EvaluationListByVodieResp)(nil), "stream.server.v1.EvaluationListByVodieResp")
	proto.RegisterType((*FileListReq)(nil), "stream.server.v1.FileListReq")
	proto.RegisterType((*FileListResp)(nil), "stream.server.v1.FileListResp")
}

func init() { proto.RegisterFile("upload.proto", fileDescriptor_91b94b655bd2a7e5) }

var fileDescriptor_91b94b655bd2a7e5 = []byte{
	// 1048 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xd1, 0x6e, 0xe3, 0x44,
	0x17, 0x96, 0x9b, 0xa4, 0x4d, 0x4f, 0x92, 0x6e, 0xff, 0xe9, 0x2f, 0x61, 0x2a, 0x51, 0x87, 0xd9,
	0x54, 0x8d, 0x58, 0x6d, 0xba, 0x94, 0x95, 0x80, 0x22, 0x84, 0x14, 0x0a, 0x68, 0x81, 0x45, 0x2b,
	0x53, 0x10, 0x2b, 0xad, 0x64, 0x9c, 0x78, 0x9a, 0x8e, 0xea, 0xd8, 0xae, 0x3d, 0x49, 0x9a, 0x37,
	0xe0, 0x45, 0xb8, 0xe3, 0x8e, 0x27, 0xe0, 0x8e, 0x0b, 0x2e, 0x78, 0x02, 0x0b, 0xf5, 0x12, 0xee,
	0xfc, 0x04, 0x68, 0x66, 0x1c, 0x67, 0xe2, 0x38, 0xa1, 0xab, 0xbd, 0xdd, 0xab, 0x8d, 0x7d, 0xbe,
	0xef, 0xf8, 0xcc, 0xf9, 0xbe, 0x73, 0x76, 0x0a, 0xf5, 0x51, 0xe0, 0xfa, 0xb6, 0xd3, 0x09, 0x42,
	0x9f, 0xf9, 0x68, 0x37, 0x62, 0x21, 0xb1, 0x87, 0x9d, 0x88, 0x84, 0x63, 0x12, 0x76, 0xc6, 0xef,
	0xee, 0x3f, 0x1c, 0x50, 0x76, 0x39, 0xea, 0x75, 0xfa, 0xfe, 0xf0, 0x78, 0xe0, 0x0f, 0xfc, 0x63,
	0x01, 0xec, 0x8d, 0x2e, 0xc4, 0x93, 0x78, 0x10, 0xbf, 0x64, 0x02, 0xfc, 0xab, 0x06, 0xb5, 0x6f,
	0xc8, 0xe4, 0xdc, 0xbf, 0x22, 0x9e, 0x49, 0xae, 0xd1, 0xc7, 0xb0, 0xd9, 0x1b, 0xf5, 0xaf, 0x08,
	0xd3, 0xb5, 0xa6, 0xd6, 0xde, 0xee, 0x1e, 0x26, 0xb1, 0xf1, 0xf6, 0x85, 0x1f, 0x0e, 0x4f, 0xb1,
	0x7c, 0x8f, 0x9b, 0x63, 0xdb, 0xa5, 0x8e, 0xcd, 0xc8, 0x29, 0x0e, 0xc9, 0xf5, 0x88, 0x86, 0xc4,
	0xc1, 0x66, 0x4a, 0x42, 0x4d, 0x28, 0x39, 0x34, 0xd4, 0x37, 0x04, 0x77, 0x27, 0x89, 0x0d, 0x90,
	0x5c, 0x87, 0x86, 0xd8, 0xe4, 0x21, 0xf4, 0x29, 0x54, 0xfd, 0x80, 0x84, 0x36, 0xf3, 0x43, 0xbd,
	0x24, 0x60, 0x47, 0x49, 0x6c, 0xdc, 0x97, 0xb0, 0x59, 0xa4, 0xf8, 0x23, 0x19, 0x11, 0x1f, 0x43,
	0x7d, 0x5e, 0x74, 0x14, 0x20, 0x03, 0x2a, 0x8c, 0x3f, 0xa4, 0x45, 0x6f, 0xff, 0x1d, 0x1b, 0xf2,
	0x85, 0x29, 0xff, 0xc1, 0xbf, 0x94, 0xa1, 0xf1, 0x9d, 0x68, 0xdc, 0xe7, 0xd4, 0x25, 0xfc, 0xa0,
	0x1f, 0x40, 0x99, 0x3a, 0x9e, 0x9f, 0x32, 0x5a, 0x49, 0x6c, 0x34, 0x65, 0x0d, 0xd4, 0xb1, 0x3c,
	0xbf, 0xb8, 0x00, 0xc1, 0xb8, 0xc3, 0x19, 0xcf, 0xa0, 0x7a, 0x41, 0x5d, 0xe2, 0xd9, 0x43, 0x92,
	0x9e, 0xb1, 0x9d, 0xc4, 0x46, 0x4b, 0xc2, 0x78, 0xc4, 0xe2, 0xa1, 0x15, 0x87, 0x9c, 0x31, 0xd1,
	0x53, 0xa8, 0xf5, 0x7d, 0x8f, 0x11, 0x8f, 0x9d, 0x4f, 0x03, 0xa2, 0x97, 0x45, 0xa2, 0x07, 0x49,
	0x6c, 0x1c, 0xc9, 0x44, 0x69, 0xd0, 0x62, 0xd3, 0x60, 0x45, 0x2e, 0x95, 0x8f, 0x8e, 0xa0, 0x32,
	0x19, 0x7e, 0x45, 0xa6, 0x7a, 0x45, 0x24, 0xfa, 0x5f, 0x12, 0x1b, 0x0d, 0x99, 0x68, 0x32, 0xb4,
	0xae, 0xc8, 0x14, 0x9b, 0x32, 0x8e, 0xde, 0x81, 0xcd, 0xc9, 0xf0, 0x9c, 0xdc, 0x30, 0x7d, 0x53,
	0x20, 0x51, 0x12, 0x1b, 0x3b, 0x19, 0x92, 0x91, 0x1b, 0x86, 0xcd, 0x14, 0x81, 0xde, 0x07, 0x98,
	0x0c, 0x9f, 0xd9, 0x8e, 0x43, 0xbd, 0xc1, 0x0f, 0xfa, 0x56, 0x53, 0x6b, 0x37, 0xba, 0x6f, 0x24,
	0xb1, 0xb1, 0x97, 0xe1, 0x03, 0x19, 0xb4, 0x6e, 0xb0, 0xa9, 0x40, 0x17, 0x88, 0xcf, 0xf5, 0xea,
	0x1a, 0xe2, 0x54, 0x25, 0x3e, 0x47, 0x0f, 0x61, 0x6b, 0x32, 0xfc, 0xb6, 0x6f, 0xbb, 0x44, 0xdf,
	0x6e, 0x6a, 0x6d, 0xad, 0xbb, 0x97, 0xc4, 0xc6, 0xbd, 0x8c, 0x15, 0xf1, 0x08, 0x36, 0x67, 0x18,
	0xf4, 0x18, 0x4a, 0xcc, 0x1e, 0xe8, 0x20, 0x4e, 0x82, 0x93, 0xd8, 0x38, 0x90, 0x50, 0x66, 0x0f,
	0x8a, 0x7b, 0xc6, 0xe1, 0xf8, 0xa7, 0x0a, 0xec, 0xa8, 0x76, 0x89, 0x02, 0xd4, 0x5a, 0xf0, 0xcb,
	0x6e, 0x12, 0x1b, 0x75, 0xd5, 0x2f, 0x77, 0xf6, 0xc6, 0xa3, 0x25, 0x6f, 0xfc, 0x3f, 0x89, 0x8d,
	0xdd, 0xbc, 0x37, 0x14, 0x1f, 0x7c, 0x58, 0xe4, 0x03, 0xa5, 0x57, 0x0b, 0x3e, 0x78, 0xad, 0x39,
	0xe1, 0x22, 0xcc, 0x35, 0x57, 0x44, 0xe0, 0xca, 0x0a, 0x7d, 0x39, 0x62, 0x4c, 0x1d, 0xbd, 0x96,
	0x47, 0x8c, 0x29, 0x77, 0xc0, 0x98, 0x3a, 0x5c, 0xa6, 0x7e, 0x48, 0x6c, 0x46, 0x6c, 0xa6, 0xd7,
	0xf3, 0x32, 0xc9, 0x88, 0x65, 0x33, 0x6c, 0x66, 0xa8, 0x39, 0x83, 0x06, 0x7a, 0x63, 0x05, 0x83,
	0x06, 0x19, 0x83, 0x06, 0xe8, 0x3e, 0x94, 0x2f, 0xed, 0xe8, 0x52, 0xdf, 0x11, 0xe8, 0x7b, 0x49,
	0x6c, 0xd4, 0x24, 0x9a, 0xbf, 0xc5, 0xa6, 0x08, 0xe2, 0x7f, 0x36, 0x00, 0x7d, 0x36, 0xb6, 0xdd,
	0x91, 0xcd, 0xa8, 0xef, 0x7d, 0xef, 0x3b, 0xf4, 0x15, 0xd7, 0xd7, 0x47, 0x50, 0x21, 0x82, 0xba,
	0x91, 0x5f, 0xf0, 0xc4, 0xe2, 0xef, 0x8b, 0xb9, 0x92, 0x23, 0xc8, 0x8a, 0x75, 0x17, 0xc8, 0xab,
	0x77, 0x9a, 0xe4, 0xf0, 0xb5, 0x48, 0x52, 0x77, 0xa6, 0x2e, 0x56, 0xd6, 0x22, 0xb1, 0xd2, 0xd0,
	0x8a, 0xb5, 0x38, 0x63, 0xf2, 0x89, 0xe6, 0xda, 0x55, 0xf2, 0x13, 0xcd, 0xb5, 0x2b, 0x9e, 0x68,
	0xae, 0xe7, 0x21, 0x94, 0x3d, 0x42, 0x9d, 0xd4, 0xde, 0xca, 0x20, 0x78, 0x16, 0xe1, 0x44, 0x53,
	0x84, 0xf1, 0x1f, 0x1a, 0xec, 0xce, 0xbb, 0xfd, 0x05, 0x61, 0xbc, 0xd7, 0xad, 0x94, 0xbb, 0x34,
	0xfa, 0x9e, 0x42, 0x9d, 0xd5, 0xb5, 0xf1, 0x72, 0x75, 0x3d, 0x82, 0x6a, 0xc4, 0xec, 0x90, 0x3d,
	0xf3, 0x23, 0xd1, 0xd3, 0x8a, 0xea, 0x1a, 0x11, 0xb1, 0x02, 0x3f, 0xc2, 0x66, 0x86, 0xe2, 0xa3,
	0x4a, 0x3c, 0x87, 0xe3, 0xcb, 0x02, 0xaf, 0x8c, 0x2a, 0xf1, 0x1c, 0x89, 0x4e, 0x11, 0xf8, 0xb7,
	0x32, 0xec, 0x2d, 0x99, 0x27, 0x0a, 0x5e, 0xbb, 0xe7, 0x25, 0xdd, 0xf3, 0x18, 0x4a, 0x73, 0xf3,
	0x28, 0x2c, 0xb2, 0x92, 0xc5, 0x1d, 0x71, 0xa6, 0xec, 0x90, 0xad, 0x7c, 0xc5, 0xf3, 0x1d, 0x52,
	0x5c, 0x71, 0xb6, 0x57, 0xce, 0x94, 0xbd, 0x52, 0x5d, 0x91, 0x85, 0x06, 0x6b, 0xb3, 0x50, 0xa1,
	0xb8, 0xf0, 0xf0, 0x76, 0x5e, 0xf1, 0xd4, 0xff, 0x85, 0x8a, 0x0b, 0x7f, 0xbf, 0x80, 0x37, 0xe7,
	0x16, 0xfa, 0x9a, 0x46, 0xac, 0x3b, 0x9d, 0x1b, 0xe9, 0x13, 0xd8, 0x0a, 0x49, 0x34, 0x72, 0x59,
	0xa4, 0x6b, 0xcd, 0x52, 0xbb, 0x76, 0x72, 0xd8, 0xc9, 0xdf, 0x48, 0x3b, 0x05, 0x06, 0x34, 0x67,
	0x2c, 0xfc, 0xb3, 0x06, 0x35, 0xfe, 0x7f, 0x2c, 0x4f, 0xfc, 0x6a, 0x7b, 0x6d, 0x36, 0x49, 0x81,
	0x1f, 0x09, 0x73, 0xae, 0x9f, 0xa4, 0x20, 0x9b, 0xa4, 0x20, 0x9b, 0xbc, 0x55, 0x93, 0xc4, 0x7f,
	0x7c, 0x09, 0xf5, 0x79, 0x99, 0x51, 0x80, 0x4e, 0xf3, 0x07, 0x6f, 0x2e, 0x1f, 0x7c, 0xf1, 0x06,
	0x91, 0x9d, 0xf9, 0xe4, 0x29, 0x54, 0xc4, 0xd5, 0x15, 0x9d, 0x41, 0xc9, 0x23, 0x13, 0xf4, 0xd6,
	0x32, 0x55, 0xb9, 0x92, 0xef, 0x1f, 0xac, 0x0b, 0x47, 0xc1, 0x49, 0xbc, 0x01, 0x9b, 0xf2, 0x53,
	0xe8, 0x09, 0x94, 0xf9, 0xb5, 0x01, 0x19, 0xeb, 0x8b, 0xb9, 0xde, 0xff, 0xcf, 0x6a, 0xd1, 0x0b,
	0x68, 0xd8, 0x8e, 0x43, 0x32, 0xed, 0x50, 0xeb, 0x0e, 0xca, 0x5e, 0xef, 0xdf, 0x4d, 0x7f, 0xf4,
	0x23, 0x34, 0x78, 0xa1, 0xb6, 0xeb, 0xf2, 0x2f, 0xf4, 0xa6, 0x08, 0xaf, 0xe3, 0xc9, 0x3d, 0xbc,
	0xff, 0x60, 0x1d, 0x26, 0xef, 0xcc, 0x27, 0x50, 0x75, 0x69, 0xc4, 0x44, 0x3b, 0x0a, 0x1a, 0xac,
	0x78, 0xae, 0xa8, 0xc1, 0xaa, 0xd6, 0xdd, 0xfa, 0xef, 0xb7, 0x07, 0xda, 0x9f, 0xb7, 0x07, 0xda,
	0x5f, 0xb7, 0x07, 0x5a, 0x6f, 0x53, 0xfc, 0xe1, 0xf4, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xe2, 0x76, 0x55, 0x75, 0x89, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenClient interface {
	// Request for a token for upload.
	// `method:"POST" internal:"true"`
	New(ctx context.Context, in *NewTokenReq, opts ...grpc.CallOption) (*NewTokenResp, error)
}

type tokenClient struct {
	cc *grpc.ClientConn
}

func NewTokenClient(cc *grpc.ClientConn) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) New(ctx context.Context, in *NewTokenReq, opts ...grpc.CallOption) (*NewTokenResp, error) {
	out := new(NewTokenResp)
	err := c.cc.Invoke(ctx, "/stream.server.v1.Token/new", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
type TokenServer interface {
	// Request for a token for upload.
	// `method:"POST" internal:"true"`
	New(context.Context, *NewTokenReq) (*NewTokenResp, error)
}

// UnimplementedTokenServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServer struct {
}

func (*UnimplementedTokenServer) New(ctx context.Context, req *NewTokenReq) (*NewTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}

func RegisterTokenServer(s *grpc.Server, srv TokenServer) {
	s.RegisterService(&_Token_serviceDesc, srv)
}

func _Token_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.server.v1.Token/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).New(ctx, req.(*NewTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Token_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.server.v1.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "new",
			Handler:    _Token_New_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload.proto",
}

// UploadClient is the client API for Upload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadClient interface {
	// `method:"POST" content-type:"multipart/form-data" midware:"cors,guest"`
	File(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error)
	//添加视频的评价
	Addevaluation(ctx context.Context, in *EvaluationVodieReq, opts ...grpc.CallOption) (*EvaluationVodieResp, error)
	//获取视频所有评价
	Fileallevalby(ctx context.Context, in *EvaluationGetReq, opts ...grpc.CallOption) (*EvaluationListByVodieResp, error)
	//获取指定视频
	Listfile(ctx context.Context, in *FileListReq, opts ...grpc.CallOption) (*FileListResp, error)
}

type uploadClient struct {
	cc *grpc.ClientConn
}

func NewUploadClient(cc *grpc.ClientConn) UploadClient {
	return &uploadClient{cc}
}

func (c *uploadClient) File(ctx context.Context, in *UploadFileReq, opts ...grpc.CallOption) (*UploadFileResp, error) {
	out := new(UploadFileResp)
	err := c.cc.Invoke(ctx, "/stream.server.v1.Upload/file", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) Addevaluation(ctx context.Context, in *EvaluationVodieReq, opts ...grpc.CallOption) (*EvaluationVodieResp, error) {
	out := new(EvaluationVodieResp)
	err := c.cc.Invoke(ctx, "/stream.server.v1.Upload/addevaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) Fileallevalby(ctx context.Context, in *EvaluationGetReq, opts ...grpc.CallOption) (*EvaluationListByVodieResp, error) {
	out := new(EvaluationListByVodieResp)
	err := c.cc.Invoke(ctx, "/stream.server.v1.Upload/fileallevalby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) Listfile(ctx context.Context, in *FileListReq, opts ...grpc.CallOption) (*FileListResp, error) {
	out := new(FileListResp)
	err := c.cc.Invoke(ctx, "/stream.server.v1.Upload/listfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServer is the server API for Upload service.
type UploadServer interface {
	// `method:"POST" content-type:"multipart/form-data" midware:"cors,guest"`
	File(context.Context, *UploadFileReq) (*UploadFileResp, error)
	//添加视频的评价
	Addevaluation(context.Context, *EvaluationVodieReq) (*EvaluationVodieResp, error)
	//获取视频所有评价
	Fileallevalby(context.Context, *EvaluationGetReq) (*EvaluationListByVodieResp, error)
	//获取指定视频
	Listfile(context.Context, *FileListReq) (*FileListResp, error)
}

// UnimplementedUploadServer can be embedded to have forward compatible implementations.
type UnimplementedUploadServer struct {
}

func (*UnimplementedUploadServer) File(ctx context.Context, req *UploadFileReq) (*UploadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (*UnimplementedUploadServer) Addevaluation(ctx context.Context, req *EvaluationVodieReq) (*EvaluationVodieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addevaluation not implemented")
}
func (*UnimplementedUploadServer) Fileallevalby(ctx context.Context, req *EvaluationGetReq) (*EvaluationListByVodieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fileallevalby not implemented")
}
func (*UnimplementedUploadServer) Listfile(ctx context.Context, req *FileListReq) (*FileListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listfile not implemented")
}

func RegisterUploadServer(s *grpc.Server, srv UploadServer) {
	s.RegisterService(&_Upload_serviceDesc, srv)
}

func _Upload_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.server.v1.Upload/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).File(ctx, req.(*UploadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_Addevaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationVodieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).Addevaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.server.v1.Upload/Addevaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).Addevaluation(ctx, req.(*EvaluationVodieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_Fileallevalby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).Fileallevalby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.server.v1.Upload/Fileallevalby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).Fileallevalby(ctx, req.(*EvaluationGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_Listfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).Listfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.server.v1.Upload/Listfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).Listfile(ctx, req.(*FileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Upload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.server.v1.Upload",
	HandlerType: (*UploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "file",
			Handler:    _Upload_File_Handler,
		},
		{
			MethodName: "addevaluation",
			Handler:    _Upload_Addevaluation_Handler,
		},
		{
			MethodName: "fileallevalby",
			Handler:    _Upload_Fileallevalby_Handler,
		},
		{
			MethodName: "listfile",
			Handler:    _Upload_Listfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload.proto",
}

func (m *NewTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTokenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bucket) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Bucket)))
		i += copy(dAtA[i:], m.Bucket)
	}
	if len(m.Dir) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Dir)))
		i += copy(dAtA[i:], m.Dir)
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTokenResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UploadFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Idno) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Idno)))
		i += copy(dAtA[i:], m.Idno)
	}
	if len(m.Dir) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Dir)))
		i += copy(dAtA[i:], m.Dir)
	}
	if len(m.Filename) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if len(m.ContentType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if len(m.WmKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.WmKey)))
		i += copy(dAtA[i:], m.WmKey)
	}
	if len(m.WmText) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.WmText)))
		i += copy(dAtA[i:], m.WmText)
	}
	if m.WmPaddingX != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.WmPaddingX))
	}
	if m.WmPaddingY != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.WmPaddingY))
	}
	if m.WmScale != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WmScale))))
		i += 8
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UploadFileResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadFileResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Idno) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Idno)))
		i += copy(dAtA[i:], m.Idno)
	}
	if len(m.Dir) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Dir)))
		i += copy(dAtA[i:], m.Dir)
	}
	if len(m.Filename) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if len(m.ContentType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if len(m.WmKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.WmKey)))
		i += copy(dAtA[i:], m.WmKey)
	}
	if len(m.WmText) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.WmText)))
		i += copy(dAtA[i:], m.WmText)
	}
	if m.WmPaddingX != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.WmPaddingX))
	}
	if m.WmPaddingY != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.WmPaddingY))
	}
	if m.WmScale != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WmScale))))
		i += 8
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.Vid) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Vid)))
		i += copy(dAtA[i:], m.Vid)
	}
	if len(m.Createat) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Createat)))
		i += copy(dAtA[i:], m.Createat)
	}
	if len(m.Createip) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Createip)))
		i += copy(dAtA[i:], m.Createip)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EvaluationVodieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationVodieReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Idno) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Idno)))
		i += copy(dAtA[i:], m.Idno)
	}
	if len(m.Eidno) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Eidno)))
		i += copy(dAtA[i:], m.Eidno)
	}
	if len(m.Ename) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Ename)))
		i += copy(dAtA[i:], m.Ename)
	}
	if len(m.Econtent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Econtent)))
		i += copy(dAtA[i:], m.Econtent)
	}
	if len(m.Vid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Vid)))
		i += copy(dAtA[i:], m.Vid)
	}
	if len(m.Neid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Neid)))
		i += copy(dAtA[i:], m.Neid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EvaluationGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Neid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Neid)))
		i += copy(dAtA[i:], m.Neid)
	}
	if len(m.Vid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Vid)))
		i += copy(dAtA[i:], m.Vid)
	}
	if m.StartPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.StartPos))
	}
	if m.EndPos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.EndPos))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EvaluationVodieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationVodieResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Idno) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Idno)))
		i += copy(dAtA[i:], m.Idno)
	}
	if len(m.Eidno) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Eidno)))
		i += copy(dAtA[i:], m.Eidno)
	}
	if len(m.Ename) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Ename)))
		i += copy(dAtA[i:], m.Ename)
	}
	if len(m.Econtent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Econtent)))
		i += copy(dAtA[i:], m.Econtent)
	}
	if len(m.Vid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Vid)))
		i += copy(dAtA[i:], m.Vid)
	}
	if len(m.Eid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Eid)))
		i += copy(dAtA[i:], m.Eid)
	}
	if len(m.Createat) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Createat)))
		i += copy(dAtA[i:], m.Createat)
	}
	if len(m.Createip) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Createip)))
		i += copy(dAtA[i:], m.Createip)
	}
	if len(m.Neid) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Neid)))
		i += copy(dAtA[i:], m.Neid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EvaluationListByVodieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluationListByVodieResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUpload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Idno) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpload(dAtA, i, uint64(len(m.Idno)))
		i += copy(dAtA[i:], m.Idno)
	}
	if m.Startpos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.Startpos))
	}
	if m.Endpos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUpload(dAtA, i, uint64(m.Endpos))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUpload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUpload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Idno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.WmKey)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.WmText)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.WmPaddingX != 0 {
		n += 1 + sovUpload(uint64(m.WmPaddingX))
	}
	if m.WmPaddingY != 0 {
		n += 1 + sovUpload(uint64(m.WmPaddingY))
	}
	if m.WmScale != 0 {
		n += 9
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadFileResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Idno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.WmKey)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.WmText)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.WmPaddingX != 0 {
		n += 1 + sovUpload(uint64(m.WmPaddingX))
	}
	if m.WmPaddingY != 0 {
		n += 1 + sovUpload(uint64(m.WmPaddingY))
	}
	if m.WmScale != 0 {
		n += 9
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Createat)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Createip)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EvaluationVodieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Idno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Eidno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Ename)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Econtent)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Neid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EvaluationGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Neid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.StartPos != 0 {
		n += 1 + sovUpload(uint64(m.StartPos))
	}
	if m.EndPos != 0 {
		n += 1 + sovUpload(uint64(m.EndPos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EvaluationVodieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Idno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Eidno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Ename)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Econtent)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Eid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Createat)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Createip)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	l = len(m.Neid)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EvaluationListByVodieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovUpload(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Idno)
	if l > 0 {
		n += 1 + l + sovUpload(uint64(l))
	}
	if m.Startpos != 0 {
		n += 1 + sovUpload(uint64(m.Startpos))
	}
	if m.Endpos != 0 {
		n += 1 + sovUpload(uint64(m.Endpos))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovUpload(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUpload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpload(x uint64) (n int) {
	return sovUpload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WmKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WmText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmPaddingX", wireType)
			}
			m.WmPaddingX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WmPaddingX |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmPaddingY", wireType)
			}
			m.WmPaddingY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WmPaddingY |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmScale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WmScale = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadFileResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadFileResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadFileResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WmKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WmText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmPaddingX", wireType)
			}
			m.WmPaddingX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WmPaddingX |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmPaddingY", wireType)
			}
			m.WmPaddingY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WmPaddingY |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WmScale", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WmScale = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationVodieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationVodieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationVodieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eidno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eidno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Econtent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Econtent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPos", wireType)
			}
			m.StartPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPos", wireType)
			}
			m.EndPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndPos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationVodieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationVodieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationVodieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eidno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eidno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Econtent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Econtent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluationListByVodieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluationListByVodieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluationListByVodieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &EvaluationVodieResp{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idno", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idno = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Startpos", wireType)
			}
			m.Startpos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Startpos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpos", wireType)
			}
			m.Endpos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endpos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &UploadFileResp{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpload
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthUpload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUpload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUpload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthUpload
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUpload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpload   = fmt.Errorf("proto: integer overflow")
)
